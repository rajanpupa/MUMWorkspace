/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAClassdeclsFirstClassDecls(AClassdeclsFirstClassDecls node);
    void caseAClassdeclsSecondClassDecls(AClassdeclsSecondClassDecls node);
    void caseAClassdeclFirstClassDecl(AClassdeclFirstClassDecl node);
    void caseAClassdeclSecondClassDecl(AClassdeclSecondClassDecl node);
    void caseAClasshdrFirstClassHdr(AClasshdrFirstClassHdr node);
    void caseAMemberdeclsFirstMemberDecls(AMemberdeclsFirstMemberDecls node);
    void caseAMemberdeclsSecondMemberDecls(AMemberdeclsSecondMemberDecls node);
    void caseAMemberFirstMember(AMemberFirstMember node);
    void caseAMemberSecondMember(AMemberSecondMember node);
    void caseAMemberThirdMember(AMemberThirdMember node);
    void caseAFieldFirstField(AFieldFirstField node);
    void caseAFieldSecondField(AFieldSecondField node);
    void caseAFieldThirdField(AFieldThirdField node);
    void caseATypeFirstType(ATypeFirstType node);
    void caseATypeSecondType(ATypeSecondType node);
    void caseATypeThirdType(ATypeThirdType node);
    void caseATypeFourthType(ATypeFourthType node);
    void caseATypeFifthType(ATypeFifthType node);
    void caseAMethodFirstMethod(AMethodFirstMethod node);
    void caseAMethodSecondMethod(AMethodSecondMethod node);
    void caseAMethodhdrFirstMethodHdr(AMethodhdrFirstMethodHdr node);
    void caseAMethodhdrSecondMethodHdr(AMethodhdrSecondMethodHdr node);
    void caseAFormalsFirstFormals(AFormalsFirstFormals node);
    void caseAFormalsSecondFormals(AFormalsSecondFormals node);
    void caseAFormalFirstFormal(AFormalFirstFormal node);
    void caseAFormalSecondFormal(AFormalSecondFormal node);
    void caseABlockFirstBlock(ABlockFirstBlock node);
    void caseABlockSecondBlock(ABlockSecondBlock node);
    void caseAStmtsFirstStmts(AStmtsFirstStmts node);
    void caseAStmtsSecondStmts(AStmtsSecondStmts node);
    void caseAMifFirstMif(AMifFirstMif node);
    void caseAStmtSecondMif(AStmtSecondMif node);
    void caseAUifFirstUif(AUifFirstUif node);
    void caseAUifSecondUif(AUifSecondUif node);
    void caseAStmtFirstStmt(AStmtFirstStmt node);
    void caseAStmtSecondStmt(AStmtSecondStmt node);
    void caseACondition(ACondition node);
    void caseALocaldeclFirstLocalDecl(ALocaldeclFirstLocalDecl node);
    void caseALocaldeclSecondLocalDecl(ALocaldeclSecondLocalDecl node);
    void caseALocaldeclThirdLocalDecl(ALocaldeclThirdLocalDecl node);
    void caseASimplestmtFirstSimpleStmt(ASimplestmtFirstSimpleStmt node);
    void caseASimplestmtSecondSimpleStmt(ASimplestmtSecondSimpleStmt node);
    void caseASimplestmtThirdSimpleStmt(ASimplestmtThirdSimpleStmt node);
    void caseASimplestmtFourthSimpleStmt(ASimplestmtFourthSimpleStmt node);
    void caseASimplestmtFifthSimpleStmt(ASimplestmtFifthSimpleStmt node);
    void caseASimplestmtSixthSimpleStmt(ASimplestmtSixthSimpleStmt node);
    void caseASimplestmtSeventhSimpleStmt(ASimplestmtSeventhSimpleStmt node);
    void caseASimplestmtEightthSimpleStmt(ASimplestmtEightthSimpleStmt node);
    void caseASimplestmtNinthSimpleStmt(ASimplestmtNinthSimpleStmt node);
    void caseAFieldaccessFirstFieldAccess(AFieldaccessFirstFieldAccess node);
    void caseAFieldaccessSecondFieldAccess(AFieldaccessSecondFieldAccess node);
    void caseAFieldaccessThirdFieldAccess(AFieldaccessThirdFieldAccess node);
    void caseAArrayrefFirstArrayRef(AArrayrefFirstArrayRef node);
    void caseAArrayrefSecondArrayRef(AArrayrefSecondArrayRef node);
    void caseAMethodcallFirstMethodCall(AMethodcallFirstMethodCall node);
    void caseAMethodcallSecondMethodCall(AMethodcallSecondMethodCall node);
    void caseAMethodcallThirdMethodCall(AMethodcallThirdMethodCall node);
    void caseAMethodcallFourthMethodCall(AMethodcallFourthMethodCall node);
    void caseAArgsFirstArgs(AArgsFirstArgs node);
    void caseAArgsSecondArgs(AArgsSecondArgs node);
    void caseAExprOneExpr(AExprOneExpr node);
    void caseAExprTwoExpr(AExprTwoExpr node);
    void caseAExprThreeExpr(AExprThreeExpr node);
    void caseAEtwoFiveExprLogical(AEtwoFiveExprLogical node);
    void caseAEtwoSixExprLogical(AEtwoSixExprLogical node);
    void caseAEtwoOneExprLogical(AEtwoOneExprLogical node);
    void caseAEtwoTwoExprLogical(AEtwoTwoExprLogical node);
    void caseAEtwoThreeExprLogical(AEtwoThreeExprLogical node);
    void caseAEtwoFourExprLogical(AEtwoFourExprLogical node);
    void caseAEtwoSevenExprLogical(AEtwoSevenExprLogical node);
    void caseAEthreeOneExprAddSub(AEthreeOneExprAddSub node);
    void caseAEthreeTwoExprAddSub(AEthreeTwoExprAddSub node);
    void caseAEthreeThreeExprAddSub(AEthreeThreeExprAddSub node);
    void caseAEfourOneExprMulDiv(AEfourOneExprMulDiv node);
    void caseAEfourTwoExprMulDiv(AEfourTwoExprMulDiv node);
    void caseAEfourThreeExprMulDiv(AEfourThreeExprMulDiv node);
    void caseAEfourFourExprMulDiv(AEfourFourExprMulDiv node);
    void caseAEfiveOneExprUnaryOprt(AEfiveOneExprUnaryOprt node);
    void caseAEfiveTwoExprUnaryOprt(AEfiveTwoExprUnaryOprt node);
    void caseAEfiveThreeExprUnaryOprt(AEfiveThreeExprUnaryOprt node);
    void caseAEFiveFourExprUnaryOprt(AEFiveFourExprUnaryOprt node);
    void caseAPrimaryOnePrimary(APrimaryOnePrimary node);
    void caseAPrimaryTwoPrimary(APrimaryTwoPrimary node);
    void caseAPrimaryThreePrimary(APrimaryThreePrimary node);
    void caseAPrimaryFourPrimary(APrimaryFourPrimary node);
    void caseAPrimaryFivePrimary(APrimaryFivePrimary node);
    void caseAPrimarySixPrimary(APrimarySixPrimary node);
    void caseAPrimarySevenPrimary(APrimarySevenPrimary node);
    void caseAPrimaryEightPrimary(APrimaryEightPrimary node);
    void caseAPrimaryNinePrimary(APrimaryNinePrimary node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTMultilineComment(TMultilineComment node);
    void caseTSingleComment(TSingleComment node);
    void caseTIntegerConstant(TIntegerConstant node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTCharacterConstant(TCharacterConstant node);
    void caseTFloatingConstant(TFloatingConstant node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAmpersand(TAmpersand node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTExclMark(TExclMark node);
    void caseTBar(TBar node);
    void caseTEqual(TEqual node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTArrow(TArrow node);
    void caseTAndOprtn(TAndOprtn node);
    void caseTOrOprtn(TOrOprtn node);
    void caseTModEqual(TModEqual node);
    void caseTPlusEqual(TPlusEqual node);
    void caseTMinusEqual(TMinusEqual node);
    void caseTAmpersandEqual(TAmpersandEqual node);
    void caseTCaretEqual(TCaretEqual node);
    void caseTBool(TBool node);
    void caseTBreak(TBreak node);
    void caseTChar(TChar node);
    void caseTConst(TConst node);
    void caseTContinue(TContinue node);
    void caseTClazz(TClazz node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFalse(TFalse node);
    void caseTFloat(TFloat node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTPrivate(TPrivate node);
    void caseTProtected(TProtected node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTStatic(TStatic node);
    void caseTString(TString node);
    void caseTStruct(TStruct node);
    void caseTThis(TThis node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTVoid(TVoid node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}
