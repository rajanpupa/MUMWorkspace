/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AFormalsSecondFormals extends PFormals
{
    private PFormals _formals_;
    private TComma _comma_;
    private PFormal _formal_;

    public AFormalsSecondFormals()
    {
        // Constructor
    }

    public AFormalsSecondFormals(
        @SuppressWarnings("hiding") PFormals _formals_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PFormal _formal_)
    {
        // Constructor
        setFormals(_formals_);

        setComma(_comma_);

        setFormal(_formal_);

    }

    @Override
    public Object clone()
    {
        return new AFormalsSecondFormals(
            cloneNode(this._formals_),
            cloneNode(this._comma_),
            cloneNode(this._formal_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalsSecondFormals(this);
    }

    public PFormals getFormals()
    {
        return this._formals_;
    }

    public void setFormals(PFormals node)
    {
        if(this._formals_ != null)
        {
            this._formals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formals_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PFormal getFormal()
    {
        return this._formal_;
    }

    public void setFormal(PFormal node)
    {
        if(this._formal_ != null)
        {
            this._formal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._formals_)
            + toString(this._comma_)
            + toString(this._formal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._formals_ == child)
        {
            this._formals_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._formal_ == child)
        {
            this._formal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._formals_ == oldChild)
        {
            setFormals((PFormals) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._formal_ == oldChild)
        {
            setFormal((PFormal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
