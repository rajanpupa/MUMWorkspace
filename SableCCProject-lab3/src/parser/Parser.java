/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AClassdeclsFirstClassDecls */
		    {
			ArrayList<Object> list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AClassdeclsSecondClassDecls */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AClassdeclFirstClassDecl */
		    {
			ArrayList<Object> list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AClassdeclSecondClassDecl */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AClasshdrFirstClassHdr */
		    {
			ArrayList<Object> list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AMemberdeclsFirstMemberDecls */
		    {
			ArrayList<Object> list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AMemberdeclsSecondMemberDecls */
		    {
			ArrayList<Object> list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AMemberFirstMember */
		    {
			ArrayList<Object> list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce AMemberSecondMember */
		    {
			ArrayList<Object> list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AMemberThirdMember */
		    {
			ArrayList<Object> list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AFieldFirstField */
		    {
			ArrayList<Object> list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AFieldSecondField */
		    {
			ArrayList<Object> list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AFieldThirdField */
		    {
			ArrayList<Object> list = new13();
			push(goTo(6), list, false);
		    }
		    break;
                    case 14: /* reduce ATypeFirstType */
		    {
			ArrayList<Object> list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce ATypeSecondType */
		    {
			ArrayList<Object> list = new15();
			push(goTo(7), list, false);
		    }
		    break;
                    case 16: /* reduce ATypeThirdType */
		    {
			ArrayList<Object> list = new16();
			push(goTo(7), list, false);
		    }
		    break;
                    case 17: /* reduce ATypeFourthType */
		    {
			ArrayList<Object> list = new17();
			push(goTo(7), list, false);
		    }
		    break;
                    case 18: /* reduce ATypeFifthType */
		    {
			ArrayList<Object> list = new18();
			push(goTo(7), list, false);
		    }
		    break;
                    case 19: /* reduce AMethodFirstMethod */
		    {
			ArrayList<Object> list = new19();
			push(goTo(8), list, false);
		    }
		    break;
                    case 20: /* reduce AMethodSecondMethod */
		    {
			ArrayList<Object> list = new20();
			push(goTo(8), list, false);
		    }
		    break;
                    case 21: /* reduce AMethodhdrFirstMethodHdr */
		    {
			ArrayList<Object> list = new21();
			push(goTo(9), list, false);
		    }
		    break;
                    case 22: /* reduce AMethodhdrSecondMethodHdr */
		    {
			ArrayList<Object> list = new22();
			push(goTo(9), list, false);
		    }
		    break;
                    case 23: /* reduce AFormalsFirstFormals */
		    {
			ArrayList<Object> list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AFormalsSecondFormals */
		    {
			ArrayList<Object> list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce AFormalFirstFormal */
		    {
			ArrayList<Object> list = new25();
			push(goTo(11), list, false);
		    }
		    break;
                    case 26: /* reduce AFormalSecondFormal */
		    {
			ArrayList<Object> list = new26();
			push(goTo(11), list, false);
		    }
		    break;
                    case 27: /* reduce ABlockFirstBlock */
		    {
			ArrayList<Object> list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce ABlockSecondBlock */
		    {
			ArrayList<Object> list = new28();
			push(goTo(12), list, false);
		    }
		    break;
                    case 29: /* reduce AStmtsFirstStmts */
		    {
			ArrayList<Object> list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce AStmtsSecondStmts */
		    {
			ArrayList<Object> list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce AMifFirstMif */
		    {
			ArrayList<Object> list = new31();
			push(goTo(14), list, false);
		    }
		    break;
                    case 32: /* reduce AStmtSecondMif */
		    {
			ArrayList<Object> list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce AUifFirstUif */
		    {
			ArrayList<Object> list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce AUifSecondUif */
		    {
			ArrayList<Object> list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce AStmtFirstStmt */
		    {
			ArrayList<Object> list = new35();
			push(goTo(16), list, false);
		    }
		    break;
                    case 36: /* reduce AStmtSecondStmt */
		    {
			ArrayList<Object> list = new36();
			push(goTo(16), list, false);
		    }
		    break;
                    case 37: /* reduce ACondition */
		    {
			ArrayList<Object> list = new37();
			push(goTo(17), list, false);
		    }
		    break;
                    case 38: /* reduce ALocaldeclFirstLocalDecl */
		    {
			ArrayList<Object> list = new38();
			push(goTo(18), list, false);
		    }
		    break;
                    case 39: /* reduce ALocaldeclSecondLocalDecl */
		    {
			ArrayList<Object> list = new39();
			push(goTo(18), list, false);
		    }
		    break;
                    case 40: /* reduce ALocaldeclThirdLocalDecl */
		    {
			ArrayList<Object> list = new40();
			push(goTo(18), list, false);
		    }
		    break;
                    case 41: /* reduce ASimplestmtFirstSimpleStmt */
		    {
			ArrayList<Object> list = new41();
			push(goTo(19), list, false);
		    }
		    break;
                    case 42: /* reduce ASimplestmtSecondSimpleStmt */
		    {
			ArrayList<Object> list = new42();
			push(goTo(19), list, false);
		    }
		    break;
                    case 43: /* reduce ASimplestmtThirdSimpleStmt */
		    {
			ArrayList<Object> list = new43();
			push(goTo(19), list, false);
		    }
		    break;
                    case 44: /* reduce ASimplestmtFourthSimpleStmt */
		    {
			ArrayList<Object> list = new44();
			push(goTo(19), list, false);
		    }
		    break;
                    case 45: /* reduce ASimplestmtFifthSimpleStmt */
		    {
			ArrayList<Object> list = new45();
			push(goTo(19), list, false);
		    }
		    break;
                    case 46: /* reduce ASimplestmtSixthSimpleStmt */
		    {
			ArrayList<Object> list = new46();
			push(goTo(19), list, false);
		    }
		    break;
                    case 47: /* reduce ASimplestmtSeventhSimpleStmt */
		    {
			ArrayList<Object> list = new47();
			push(goTo(19), list, false);
		    }
		    break;
                    case 48: /* reduce ASimplestmtEightthSimpleStmt */
		    {
			ArrayList<Object> list = new48();
			push(goTo(19), list, false);
		    }
		    break;
                    case 49: /* reduce ASimplestmtNinthSimpleStmt */
		    {
			ArrayList<Object> list = new49();
			push(goTo(19), list, false);
		    }
		    break;
                    case 50: /* reduce AFieldaccessFirstFieldAccess */
		    {
			ArrayList<Object> list = new50();
			push(goTo(20), list, false);
		    }
		    break;
                    case 51: /* reduce AFieldaccessSecondFieldAccess */
		    {
			ArrayList<Object> list = new51();
			push(goTo(20), list, false);
		    }
		    break;
                    case 52: /* reduce AFieldaccessThirdFieldAccess */
		    {
			ArrayList<Object> list = new52();
			push(goTo(20), list, false);
		    }
		    break;
                    case 53: /* reduce AArrayrefFirstArrayRef */
		    {
			ArrayList<Object> list = new53();
			push(goTo(21), list, false);
		    }
		    break;
                    case 54: /* reduce AArrayrefSecondArrayRef */
		    {
			ArrayList<Object> list = new54();
			push(goTo(21), list, false);
		    }
		    break;
                    case 55: /* reduce AMethodcallFirstMethodCall */
		    {
			ArrayList<Object> list = new55();
			push(goTo(22), list, false);
		    }
		    break;
                    case 56: /* reduce AMethodcallSecondMethodCall */
		    {
			ArrayList<Object> list = new56();
			push(goTo(22), list, false);
		    }
		    break;
                    case 57: /* reduce AMethodcallThirdMethodCall */
		    {
			ArrayList<Object> list = new57();
			push(goTo(22), list, false);
		    }
		    break;
                    case 58: /* reduce AMethodcallFourthMethodCall */
		    {
			ArrayList<Object> list = new58();
			push(goTo(22), list, false);
		    }
		    break;
                    case 59: /* reduce AArgsFirstArgs */
		    {
			ArrayList<Object> list = new59();
			push(goTo(23), list, false);
		    }
		    break;
                    case 60: /* reduce AArgsSecondArgs */
		    {
			ArrayList<Object> list = new60();
			push(goTo(23), list, false);
		    }
		    break;
                    case 61: /* reduce AExprOneExpr */
		    {
			ArrayList<Object> list = new61();
			push(goTo(24), list, false);
		    }
		    break;
                    case 62: /* reduce AExprTwoExpr */
		    {
			ArrayList<Object> list = new62();
			push(goTo(24), list, false);
		    }
		    break;
                    case 63: /* reduce AExprThreeExpr */
		    {
			ArrayList<Object> list = new63();
			push(goTo(24), list, false);
		    }
		    break;
                    case 64: /* reduce AEtwoFiveExprLogical */
		    {
			ArrayList<Object> list = new64();
			push(goTo(25), list, false);
		    }
		    break;
                    case 65: /* reduce AEtwoSixExprLogical */
		    {
			ArrayList<Object> list = new65();
			push(goTo(25), list, false);
		    }
		    break;
                    case 66: /* reduce AEtwoOneExprLogical */
		    {
			ArrayList<Object> list = new66();
			push(goTo(25), list, false);
		    }
		    break;
                    case 67: /* reduce AEtwoTwoExprLogical */
		    {
			ArrayList<Object> list = new67();
			push(goTo(25), list, false);
		    }
		    break;
                    case 68: /* reduce AEtwoThreeExprLogical */
		    {
			ArrayList<Object> list = new68();
			push(goTo(25), list, false);
		    }
		    break;
                    case 69: /* reduce AEtwoFourExprLogical */
		    {
			ArrayList<Object> list = new69();
			push(goTo(25), list, false);
		    }
		    break;
                    case 70: /* reduce AEtwoSevenExprLogical */
		    {
			ArrayList<Object> list = new70();
			push(goTo(25), list, false);
		    }
		    break;
                    case 71: /* reduce AEthreeOneExprAddSub */
		    {
			ArrayList<Object> list = new71();
			push(goTo(26), list, false);
		    }
		    break;
                    case 72: /* reduce AEthreeTwoExprAddSub */
		    {
			ArrayList<Object> list = new72();
			push(goTo(26), list, false);
		    }
		    break;
                    case 73: /* reduce AEthreeThreeExprAddSub */
		    {
			ArrayList<Object> list = new73();
			push(goTo(26), list, false);
		    }
		    break;
                    case 74: /* reduce AEfourOneExprMulDiv */
		    {
			ArrayList<Object> list = new74();
			push(goTo(27), list, false);
		    }
		    break;
                    case 75: /* reduce AEfourTwoExprMulDiv */
		    {
			ArrayList<Object> list = new75();
			push(goTo(27), list, false);
		    }
		    break;
                    case 76: /* reduce AEfourThreeExprMulDiv */
		    {
			ArrayList<Object> list = new76();
			push(goTo(27), list, false);
		    }
		    break;
                    case 77: /* reduce AEfourFourExprMulDiv */
		    {
			ArrayList<Object> list = new77();
			push(goTo(27), list, false);
		    }
		    break;
                    case 78: /* reduce AEfiveOneExprUnaryOprt */
		    {
			ArrayList<Object> list = new78();
			push(goTo(28), list, false);
		    }
		    break;
                    case 79: /* reduce AEfiveTwoExprUnaryOprt */
		    {
			ArrayList<Object> list = new79();
			push(goTo(28), list, false);
		    }
		    break;
                    case 80: /* reduce AEfiveThreeExprUnaryOprt */
		    {
			ArrayList<Object> list = new80();
			push(goTo(28), list, false);
		    }
		    break;
                    case 81: /* reduce AEFiveFourExprUnaryOprt */
		    {
			ArrayList<Object> list = new81();
			push(goTo(28), list, false);
		    }
		    break;
                    case 82: /* reduce APrimaryOnePrimary */
		    {
			ArrayList<Object> list = new82();
			push(goTo(29), list, false);
		    }
		    break;
                    case 83: /* reduce APrimaryTwoPrimary */
		    {
			ArrayList<Object> list = new83();
			push(goTo(29), list, false);
		    }
		    break;
                    case 84: /* reduce APrimaryThreePrimary */
		    {
			ArrayList<Object> list = new84();
			push(goTo(29), list, false);
		    }
		    break;
                    case 85: /* reduce APrimaryFourPrimary */
		    {
			ArrayList<Object> list = new85();
			push(goTo(29), list, false);
		    }
		    break;
                    case 86: /* reduce APrimaryFivePrimary */
		    {
			ArrayList<Object> list = new86();
			push(goTo(29), list, false);
		    }
		    break;
                    case 87: /* reduce APrimarySixPrimary */
		    {
			ArrayList<Object> list = new87();
			push(goTo(29), list, false);
		    }
		    break;
                    case 88: /* reduce APrimarySevenPrimary */
		    {
			ArrayList<Object> list = new88();
			push(goTo(29), list, false);
		    }
		    break;
                    case 89: /* reduce APrimaryEightPrimary */
		    {
			ArrayList<Object> list = new89();
			push(goTo(29), list, false);
		    }
		    break;
                    case 90: /* reduce APrimaryNinePrimary */
		    {
			ArrayList<Object> list = new90();
			push(goTo(29), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PClassDecls pclassdeclsNode2;
        pclassdeclsNode2 = (PClassDecls)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pclassdeclsNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AClassdeclsFirstClassDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecls pclassdeclsNode1;
        {
            // Block
        PClassDecls pclassdeclsNode2;
        PClassDecl pclassdeclNode3;
        pclassdeclsNode2 = (PClassDecls)nodeArrayList1.get(0);
        pclassdeclNode3 = (PClassDecl)nodeArrayList2.get(0);

        pclassdeclsNode1 = new AClassdeclsFirstClassDecls(pclassdeclsNode2, pclassdeclNode3);
        }
	nodeList.add(pclassdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AClassdeclsSecondClassDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecls pclassdeclsNode1;
        {
            // Block
        PClassDecl pclassdeclNode2;
        pclassdeclNode2 = (PClassDecl)nodeArrayList1.get(0);

        pclassdeclsNode1 = new AClassdeclsSecondClassDecls(pclassdeclNode2);
        }
	nodeList.add(pclassdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AClassdeclFirstClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PClassHdr pclasshdrNode2;
        TLBrace tlbraceNode3;
        TRBrace trbraceNode4;
        pclasshdrNode2 = (PClassHdr)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pclassdeclNode1 = new AClassdeclFirstClassDecl(pclasshdrNode2, tlbraceNode3, trbraceNode4);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AClassdeclSecondClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PClassHdr pclasshdrNode2;
        TLBrace tlbraceNode3;
        PMemberDecls pmemberdeclsNode4;
        TRBrace trbraceNode5;
        pclasshdrNode2 = (PClassHdr)nodeArrayList1.get(0);
        tlbraceNode3 = (TLBrace)nodeArrayList2.get(0);
        pmemberdeclsNode4 = (PMemberDecls)nodeArrayList3.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList4.get(0);

        pclassdeclNode1 = new AClassdeclSecondClassDecl(pclasshdrNode2, tlbraceNode3, pmemberdeclsNode4, trbraceNode5);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AClasshdrFirstClassHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassHdr pclasshdrNode1;
        {
            // Block
        TClazz tclazzNode2;
        TId tidNode3;
        tclazzNode2 = (TClazz)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pclasshdrNode1 = new AClasshdrFirstClassHdr(tclazzNode2, tidNode3);
        }
	nodeList.add(pclasshdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMemberdeclsFirstMemberDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMemberDecls pmemberdeclsNode1;
        {
            // Block
        PMemberDecls pmemberdeclsNode2;
        PMember pmemberNode3;
        pmemberdeclsNode2 = (PMemberDecls)nodeArrayList1.get(0);
        pmemberNode3 = (PMember)nodeArrayList2.get(0);

        pmemberdeclsNode1 = new AMemberdeclsFirstMemberDecls(pmemberdeclsNode2, pmemberNode3);
        }
	nodeList.add(pmemberdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMemberdeclsSecondMemberDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMemberDecls pmemberdeclsNode1;
        {
            // Block
        PMember pmemberNode2;
        pmemberNode2 = (PMember)nodeArrayList1.get(0);

        pmemberdeclsNode1 = new AMemberdeclsSecondMemberDecls(pmemberNode2);
        }
	nodeList.add(pmemberdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMemberFirstMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        PField pfieldNode2;
        pfieldNode2 = (PField)nodeArrayList1.get(0);

        pmemberNode1 = new AMemberFirstMember(pfieldNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMemberSecondMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        PMethod pmethodNode2;
        pmethodNode2 = (PMethod)nodeArrayList1.get(0);

        pmemberNode1 = new AMemberSecondMember(pmethodNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMemberThirdMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pmemberNode1 = new AMemberThirdMember(tsemicolonNode2);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFieldFirstField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfieldNode1 = new AFieldFirstField(ptypeNode2, tidNode3, tsemicolonNode4);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AFieldSecondField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TEqual tequalNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalNode4 = (TEqual)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pfieldNode1 = new AFieldSecondField(ptypeNode2, tidNode3, tequalNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFieldThirdField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLBracket tlbracketNode4;
        TIntegerConstant tintegerconstantNode5;
        TRBracket trbracketNode6;
        TSemicolon tsemicolonNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        tintegerconstantNode5 = (TIntegerConstant)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        pfieldNode1 = new AFieldThirdField(ptypeNode2, tidNode3, tlbracketNode4, tintegerconstantNode5, trbracketNode6, tsemicolonNode7);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATypeFirstType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeFirstType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATypeSecondType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeSecondType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATypeThirdType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeThirdType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ATypeFourthType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeFourthType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ATypeFifthType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptypeNode1 = new ATypeFifthType(tfloatNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMethodFirstMethod */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PMethodHdr pmethodhdrNode2;
        TLPar tlparNode3;
        PFormals pformalsNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        pmethodhdrNode2 = (PMethodHdr)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pformalsNode4 = (PFormals)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pmethodNode1 = new AMethodFirstMethod(pmethodhdrNode2, tlparNode3, pformalsNode4, trparNode5, pblockNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMethodSecondMethod */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PMethodHdr pmethodhdrNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        PBlock pblockNode5;
        pmethodhdrNode2 = (PMethodHdr)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        pblockNode5 = (PBlock)nodeArrayList4.get(0);

        pmethodNode1 = new AMethodSecondMethod(pmethodhdrNode2, tlparNode3, trparNode4, pblockNode5);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMethodhdrFirstMethodHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHdr pmethodhdrNode1;
        {
            // Block
        TVoid tvoidNode2;
        TId tidNode3;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pmethodhdrNode1 = new AMethodhdrFirstMethodHdr(tvoidNode2, tidNode3);
        }
	nodeList.add(pmethodhdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMethodhdrSecondMethodHdr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodHdr pmethodhdrNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pmethodhdrNode1 = new AMethodhdrSecondMethodHdr(ptypeNode2, tidNode3);
        }
	nodeList.add(pmethodhdrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFormalsFirstFormals */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        PFormal pformalNode2;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);

        pformalsNode1 = new AFormalsFirstFormals(pformalNode2);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFormalsSecondFormals */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        PFormals pformalsNode2;
        TComma tcommaNode3;
        PFormal pformalNode4;
        pformalsNode2 = (PFormals)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pformalNode4 = (PFormal)nodeArrayList3.get(0);

        pformalsNode1 = new AFormalsSecondFormals(pformalsNode2, tcommaNode3, pformalNode4);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFormalFirstFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormalFirstFormal(ptypeNode2, tidNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFormalSecondFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLBracket tlbracketNode4;
        TRBracket trbracketNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        pformalNode1 = new AFormalSecondFormal(ptypeNode2, tidNode3, tlbracketNode4, trbracketNode5);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABlockFirstBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PStmts pstmtsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlockFirstBlock(tlbraceNode2, pstmtsNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABlockSecondBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        TRBrace trbraceNode3;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        trbraceNode3 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlockSecondBlock(tlbraceNode2, trbraceNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AStmtsFirstStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmts pstmtsNode2;
        PStmt pstmtNode3;
        pstmtsNode2 = (PStmts)nodeArrayList1.get(0);
        pstmtNode3 = (PStmt)nodeArrayList2.get(0);

        pstmtsNode1 = new AStmtsFirstStmts(pstmtsNode2, pstmtNode3);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AStmtsSecondStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmts pstmtsNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pstmtsNode1 = new AStmtsSecondStmts(pstmtNode2);
        }
	nodeList.add(pstmtsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMifFirstMif */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMif pmifNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PMif pmifNode4;
        TElse telseNode5;
        PMif pmifNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pmifNode4 = (PMif)nodeArrayList3.get(0);
        telseNode5 = (TElse)nodeArrayList4.get(0);
        pmifNode6 = (PMif)nodeArrayList5.get(0);

        pmifNode1 = new AMifFirstMif(tifNode2, pconditionNode3, pmifNode4, telseNode5, pmifNode6);
        }
	nodeList.add(pmifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AStmtSecondMif */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMif pmifNode1;
        {
            // Block
        PSimpleStmt psimplestmtNode2;
        psimplestmtNode2 = (PSimpleStmt)nodeArrayList1.get(0);

        pmifNode1 = new AStmtSecondMif(psimplestmtNode2);
        }
	nodeList.add(pmifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AUifFirstUif */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUif puifNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PStmt pstmtNode4;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pstmtNode4 = (PStmt)nodeArrayList3.get(0);

        puifNode1 = new AUifFirstUif(tifNode2, pconditionNode3, pstmtNode4);
        }
	nodeList.add(puifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AUifSecondUif */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUif puifNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PMif pmifNode4;
        TElse telseNode5;
        PUif puifNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pmifNode4 = (PMif)nodeArrayList3.get(0);
        telseNode5 = (TElse)nodeArrayList4.get(0);
        puifNode6 = (PUif)nodeArrayList5.get(0);

        puifNode1 = new AUifSecondUif(tifNode2, pconditionNode3, pmifNode4, telseNode5, puifNode6);
        }
	nodeList.add(puifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AStmtFirstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PMif pmifNode2;
        pmifNode2 = (PMif)nodeArrayList1.get(0);

        pstmtNode1 = new AStmtFirstStmt(pmifNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AStmtSecondStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PUif puifNode2;
        puifNode2 = (PUif)nodeArrayList1.get(0);

        pstmtNode1 = new AStmtSecondStmt(puifNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ACondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pconditionNode1 = new ACondition(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALocaldeclFirstLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        plocaldeclNode1 = new ALocaldeclFirstLocalDecl(ptypeNode2, tidNode3, tsemicolonNode4);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALocaldeclSecondLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TEqual tequalNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tequalNode4 = (TEqual)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plocaldeclNode1 = new ALocaldeclSecondLocalDecl(ptypeNode2, tidNode3, tequalNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ALocaldeclThirdLocalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDecl plocaldeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TLBracket tlbracketNode4;
        TIntegerConstant tintegerconstantNode5;
        TRBracket trbracketNode6;
        TSemicolon tsemicolonNode7;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbracketNode4 = (TLBracket)nodeArrayList3.get(0);
        tintegerconstantNode5 = (TIntegerConstant)nodeArrayList4.get(0);
        trbracketNode6 = (TRBracket)nodeArrayList5.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList6.get(0);

        plocaldeclNode1 = new ALocaldeclThirdLocalDecl(ptypeNode2, tidNode3, tlbracketNode4, tintegerconstantNode5, trbracketNode6, tsemicolonNode7);
        }
	nodeList.add(plocaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASimplestmtFirstSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PLocalDecl plocaldeclNode2;
        plocaldeclNode2 = (PLocalDecl)nodeArrayList1.get(0);

        psimplestmtNode1 = new ASimplestmtFirstSimpleStmt(plocaldeclNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASimplestmtSecondSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PFieldAccess pfieldaccessNode2;
        TEqual tequalNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        pfieldaccessNode2 = (PFieldAccess)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        psimplestmtNode1 = new ASimplestmtSecondSimpleStmt(pfieldaccessNode2, tequalNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASimplestmtThirdSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        TSemicolon tsemicolonNode3;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        psimplestmtNode1 = new ASimplestmtThirdSimpleStmt(pmethodcallNode2, tsemicolonNode3);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ASimplestmtFourthSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        psimplestmtNode1 = new ASimplestmtFourthSimpleStmt(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASimplestmtFifthSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        psimplestmtNode1 = new ASimplestmtFifthSimpleStmt(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASimplestmtSixthSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        psimplestmtNode1 = new ASimplestmtSixthSimpleStmt(pblockNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASimplestmtSeventhSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCondition pconditionNode3;
        PBlock pblockNode4;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pblockNode4 = (PBlock)nodeArrayList3.get(0);

        psimplestmtNode1 = new ASimplestmtSeventhSimpleStmt(twhileNode2, pconditionNode3, pblockNode4);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASimplestmtEightthSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TDo tdoNode2;
        PStmts pstmtsNode3;
        TWhile twhileNode4;
        PCondition pconditionNode5;
        TSemicolon tsemicolonNode6;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        pstmtsNode3 = (PStmts)nodeArrayList2.get(0);
        twhileNode4 = (TWhile)nodeArrayList3.get(0);
        pconditionNode5 = (PCondition)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        psimplestmtNode1 = new ASimplestmtEightthSimpleStmt(tdoNode2, pstmtsNode3, twhileNode4, pconditionNode5, tsemicolonNode6);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASimplestmtNinthSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        psimplestmtNode1 = new ASimplestmtNinthSimpleStmt(tsemicolonNode2);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFieldaccessFirstFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pfieldaccessNode1 = new AFieldaccessFirstFieldAccess(tidNode2);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFieldaccessSecondFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        TId tidNode2;
        TDot tdotNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pfieldaccessNode1 = new AFieldaccessSecondFieldAccess(tidNode2, tdotNode3, tidNode4);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFieldaccessThirdFieldAccess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFieldAccess pfieldaccessNode1;
        {
            // Block
        PArrayRef parrayrefNode2;
        parrayrefNode2 = (PArrayRef)nodeArrayList1.get(0);

        pfieldaccessNode1 = new AFieldaccessThirdFieldAccess(parrayrefNode2);
        }
	nodeList.add(pfieldaccessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AArrayrefFirstArrayRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRef parrayrefNode1;
        {
            // Block
        TId tidNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        TRBracket trbracketNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        parrayrefNode1 = new AArrayrefFirstArrayRef(tidNode2, tlbracketNode3, pexprNode4, trbracketNode5);
        }
	nodeList.add(parrayrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AArrayrefSecondArrayRef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayRef parrayrefNode1;
        {
            // Block
        TId tidNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLBracket tlbracketNode5;
        PExpr pexprNode6;
        TRBracket trbracketNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlbracketNode5 = (TLBracket)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);
        trbracketNode7 = (TRBracket)nodeArrayList6.get(0);

        parrayrefNode1 = new AArrayrefSecondArrayRef(tidNode2, tdotNode3, tidNode4, tlbracketNode5, pexprNode6, trbracketNode7);
        }
	nodeList.add(parrayrefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMethodcallFirstMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pmethodcallNode1 = new AMethodcallFirstMethodCall(tidNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMethodcallSecondMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pmethodcallNode1 = new AMethodcallSecondMethodCall(tidNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMethodcallThirdMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TId tidNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLPar tlparNode5;
        TRPar trparNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pmethodcallNode1 = new AMethodcallThirdMethodCall(tidNode2, tdotNode3, tidNode4, tlparNode5, trparNode6);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMethodcallFourthMethodCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodCall pmethodcallNode1;
        {
            // Block
        TId tidNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLPar tlparNode5;
        PArgs pargsNode6;
        TRPar trparNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pargsNode6 = (PArgs)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pmethodcallNode1 = new AMethodcallFourthMethodCall(tidNode2, tdotNode3, tidNode4, tlparNode5, pargsNode6, trparNode7);
        }
	nodeList.add(pmethodcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArgsFirstArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pargsNode1 = new AArgsFirstArgs(pexprNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AArgsSecondArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgs pargsNode2;
        TComma tcommaNode3;
        PExpr pexprNode4;
        pargsNode2 = (PArgs)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pargsNode1 = new AArgsSecondArgs(pargsNode2, tcommaNode3, pexprNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExprOneExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOrOprtn toroprtnNode3;
        PExprLogical pexprlogicalNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        toroprtnNode3 = (TOrOprtn)nodeArrayList2.get(0);
        pexprlogicalNode4 = (PExprLogical)nodeArrayList3.get(0);

        pexprNode1 = new AExprOneExpr(pexprNode2, toroprtnNode3, pexprlogicalNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExprTwoExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TAndOprtn tandoprtnNode3;
        PExprLogical pexprlogicalNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tandoprtnNode3 = (TAndOprtn)nodeArrayList2.get(0);
        pexprlogicalNode4 = (PExprLogical)nodeArrayList3.get(0);

        pexprNode1 = new AExprTwoExpr(pexprNode2, tandoprtnNode3, pexprlogicalNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExprThreeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);

        pexprNode1 = new AExprThreeExpr(pexprlogicalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AEtwoFiveExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TEq teqNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoFiveExprLogical(pexprlogicalNode2, teqNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AEtwoSixExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TNeq tneqNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        tneqNode3 = (TNeq)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoSixExprLogical(pexprlogicalNode2, tneqNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AEtwoOneExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TLt tltNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoOneExprLogical(pexprlogicalNode2, tltNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AEtwoTwoExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TGt tgtNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoTwoExprLogical(pexprlogicalNode2, tgtNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AEtwoThreeExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TLteq tlteqNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        tlteqNode3 = (TLteq)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoThreeExprLogical(pexprlogicalNode2, tlteqNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AEtwoFourExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprLogical pexprlogicalNode2;
        TGteq tgteqNode3;
        PExprAddSub pexpraddsubNode4;
        pexprlogicalNode2 = (PExprLogical)nodeArrayList1.get(0);
        tgteqNode3 = (TGteq)nodeArrayList2.get(0);
        pexpraddsubNode4 = (PExprAddSub)nodeArrayList3.get(0);

        pexprlogicalNode1 = new AEtwoFourExprLogical(pexprlogicalNode2, tgteqNode3, pexpraddsubNode4);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AEtwoSevenExprLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogical pexprlogicalNode1;
        {
            // Block
        PExprAddSub pexpraddsubNode2;
        pexpraddsubNode2 = (PExprAddSub)nodeArrayList1.get(0);

        pexprlogicalNode1 = new AEtwoSevenExprLogical(pexpraddsubNode2);
        }
	nodeList.add(pexprlogicalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AEthreeOneExprAddSub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAddSub pexpraddsubNode1;
        {
            // Block
        PExprAddSub pexpraddsubNode2;
        TPlus tplusNode3;
        PExprMulDiv pexprmuldivNode4;
        pexpraddsubNode2 = (PExprAddSub)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexprmuldivNode4 = (PExprMulDiv)nodeArrayList3.get(0);

        pexpraddsubNode1 = new AEthreeOneExprAddSub(pexpraddsubNode2, tplusNode3, pexprmuldivNode4);
        }
	nodeList.add(pexpraddsubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEthreeTwoExprAddSub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAddSub pexpraddsubNode1;
        {
            // Block
        PExprAddSub pexpraddsubNode2;
        TMinus tminusNode3;
        PExprMulDiv pexprmuldivNode4;
        pexpraddsubNode2 = (PExprAddSub)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexprmuldivNode4 = (PExprMulDiv)nodeArrayList3.get(0);

        pexpraddsubNode1 = new AEthreeTwoExprAddSub(pexpraddsubNode2, tminusNode3, pexprmuldivNode4);
        }
	nodeList.add(pexpraddsubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEthreeThreeExprAddSub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAddSub pexpraddsubNode1;
        {
            // Block
        PExprMulDiv pexprmuldivNode2;
        pexprmuldivNode2 = (PExprMulDiv)nodeArrayList1.get(0);

        pexpraddsubNode1 = new AEthreeThreeExprAddSub(pexprmuldivNode2);
        }
	nodeList.add(pexpraddsubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AEfourOneExprMulDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMulDiv pexprmuldivNode1;
        {
            // Block
        PExprMulDiv pexprmuldivNode2;
        TStar tstarNode3;
        PExprUnaryOprt pexprunaryoprtNode4;
        pexprmuldivNode2 = (PExprMulDiv)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pexprunaryoprtNode4 = (PExprUnaryOprt)nodeArrayList3.get(0);

        pexprmuldivNode1 = new AEfourOneExprMulDiv(pexprmuldivNode2, tstarNode3, pexprunaryoprtNode4);
        }
	nodeList.add(pexprmuldivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AEfourTwoExprMulDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMulDiv pexprmuldivNode1;
        {
            // Block
        PExprMulDiv pexprmuldivNode2;
        TDiv tdivNode3;
        PExprUnaryOprt pexprunaryoprtNode4;
        pexprmuldivNode2 = (PExprMulDiv)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexprunaryoprtNode4 = (PExprUnaryOprt)nodeArrayList3.get(0);

        pexprmuldivNode1 = new AEfourTwoExprMulDiv(pexprmuldivNode2, tdivNode3, pexprunaryoprtNode4);
        }
	nodeList.add(pexprmuldivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AEfourThreeExprMulDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMulDiv pexprmuldivNode1;
        {
            // Block
        PExprMulDiv pexprmuldivNode2;
        TMod tmodNode3;
        PExprUnaryOprt pexprunaryoprtNode4;
        pexprmuldivNode2 = (PExprMulDiv)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexprunaryoprtNode4 = (PExprUnaryOprt)nodeArrayList3.get(0);

        pexprmuldivNode1 = new AEfourThreeExprMulDiv(pexprmuldivNode2, tmodNode3, pexprunaryoprtNode4);
        }
	nodeList.add(pexprmuldivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AEfourFourExprMulDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMulDiv pexprmuldivNode1;
        {
            // Block
        PExprUnaryOprt pexprunaryoprtNode2;
        pexprunaryoprtNode2 = (PExprUnaryOprt)nodeArrayList1.get(0);

        pexprmuldivNode1 = new AEfourFourExprMulDiv(pexprunaryoprtNode2);
        }
	nodeList.add(pexprmuldivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AEfiveOneExprUnaryOprt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprUnaryOprt pexprunaryoprtNode1;
        {
            // Block
        TExclMark texclmarkNode2;
        PExprUnaryOprt pexprunaryoprtNode3;
        texclmarkNode2 = (TExclMark)nodeArrayList1.get(0);
        pexprunaryoprtNode3 = (PExprUnaryOprt)nodeArrayList2.get(0);

        pexprunaryoprtNode1 = new AEfiveOneExprUnaryOprt(texclmarkNode2, pexprunaryoprtNode3);
        }
	nodeList.add(pexprunaryoprtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AEfiveTwoExprUnaryOprt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprUnaryOprt pexprunaryoprtNode1;
        {
            // Block
        TPlus tplusNode2;
        PExprUnaryOprt pexprunaryoprtNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pexprunaryoprtNode3 = (PExprUnaryOprt)nodeArrayList2.get(0);

        pexprunaryoprtNode1 = new AEfiveTwoExprUnaryOprt(tplusNode2, pexprunaryoprtNode3);
        }
	nodeList.add(pexprunaryoprtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AEfiveThreeExprUnaryOprt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprUnaryOprt pexprunaryoprtNode1;
        {
            // Block
        TMinus tminusNode2;
        PExprUnaryOprt pexprunaryoprtNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexprunaryoprtNode3 = (PExprUnaryOprt)nodeArrayList2.get(0);

        pexprunaryoprtNode1 = new AEfiveThreeExprUnaryOprt(tminusNode2, pexprunaryoprtNode3);
        }
	nodeList.add(pexprunaryoprtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AEFiveFourExprUnaryOprt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprUnaryOprt pexprunaryoprtNode1;
        {
            // Block
        PPrimary pprimaryNode2;
        pprimaryNode2 = (PPrimary)nodeArrayList1.get(0);

        pexprunaryoprtNode1 = new AEFiveFourExprUnaryOprt(pprimaryNode2);
        }
	nodeList.add(pexprunaryoprtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce APrimaryOnePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PFieldAccess pfieldaccessNode2;
        pfieldaccessNode2 = (PFieldAccess)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryOnePrimary(pfieldaccessNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APrimaryTwoPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        PMethodCall pmethodcallNode2;
        pmethodcallNode2 = (PMethodCall)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryTwoPrimary(pmethodcallNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce APrimaryThreePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TIntegerConstant tintegerconstantNode2;
        tintegerconstantNode2 = (TIntegerConstant)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryThreePrimary(tintegerconstantNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce APrimaryFourPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TCharacterConstant tcharacterconstantNode2;
        tcharacterconstantNode2 = (TCharacterConstant)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryFourPrimary(tcharacterconstantNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce APrimaryFivePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryFivePrimary(tstringliteralNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce APrimarySixPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TFloatingConstant tfloatingconstantNode2;
        tfloatingconstantNode2 = (TFloatingConstant)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimarySixPrimary(tfloatingconstantNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce APrimarySevenPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimarySevenPrimary(ttrueNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce APrimaryEightPrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pprimaryNode1 = new APrimaryEightPrimary(tfalseNode2);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce APrimaryNinePrimary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrimary pprimaryNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pprimaryNode1 = new APrimaryNinePrimary(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pprimaryNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {42, SHIFT, 1}, },
			{{-1, ERROR, 1}, {62, SHIFT, 6}, },
			{{-1, ERROR, 2}, {63, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {42, SHIFT, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 5}, {12, SHIFT, 8}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 8}, {7, SHIFT, 9}, {13, SHIFT, 10}, {37, SHIFT, 11}, {39, SHIFT, 12}, {46, SHIFT, 13}, {48, SHIFT, 14}, {56, SHIFT, 15}, {61, SHIFT, 16}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 16}, {62, SHIFT, 23}, },
			{{-1, ERROR, 17}, {7, SHIFT, 9}, {13, SHIFT, 24}, {37, SHIFT, 11}, {39, SHIFT, 12}, {46, SHIFT, 13}, {48, SHIFT, 14}, {56, SHIFT, 15}, {61, SHIFT, 16}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 20}, {62, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 22}, {8, SHIFT, 27}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 28}, {10, SHIFT, 29}, {22, SHIFT, 30}, },
			{{-1, ERROR, 27}, {9, SHIFT, 31}, {37, SHIFT, 11}, {39, SHIFT, 12}, {46, SHIFT, 13}, {48, SHIFT, 14}, {56, SHIFT, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 29}, {0, SHIFT, 35}, },
			{{-1, ERROR, 30}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 31}, {12, SHIFT, 56}, },
			{{-1, ERROR, 32}, {62, SHIFT, 58}, },
			{{-1, ERROR, 33}, {5, SHIFT, 59}, {9, SHIFT, 60}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 35}, {11, SHIFT, 61}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 40}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 41}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 42}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 43}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 50}, {4, SHIFT, 66}, {8, SHIFT, 67}, {10, SHIFT, 68}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 50}, {7, SHIFT, 69}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 63}, {23, SHIFT, 72}, {24, SHIFT, 73}, {25, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 70}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 73}, {14, SHIFT, 80}, {15, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 56}, {7, SHIFT, 83}, {12, SHIFT, 56}, {13, SHIFT, 84}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 88}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 25}, {10, SHIFT, 99}, },
			{{-1, ERROR, 59}, {37, SHIFT, 11}, {39, SHIFT, 12}, {46, SHIFT, 13}, {48, SHIFT, 14}, {56, SHIFT, 15}, },
			{{-1, ERROR, 60}, {12, SHIFT, 56}, },
			{{-1, ERROR, 61}, {7, SHIFT, 102}, },
			{{-1, ERROR, 62}, {9, SHIFT, 103}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 66}, {62, SHIFT, 104}, },
			{{-1, ERROR, 67}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 105}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 68}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 70}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 71}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 72}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 73}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 74}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 75}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 76}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 77}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 78}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 79}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 80}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 81}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 82}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 85}, {7, SHIFT, 83}, {12, SHIFT, 56}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 88}, {62, SHIFT, 46}, },
			{{-1, ERROR, 86}, {8, SHIFT, 123}, },
			{{-1, ERROR, 87}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {7, SHIFT, 125}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 88}, {8, SHIFT, 123}, },
			{{-1, ERROR, 89}, {62, SHIFT, 128}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 91}, {7, SHIFT, 83}, {12, SHIFT, 56}, {13, SHIFT, 129}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 88}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 97}, {22, SHIFT, 131}, },
			{{-1, ERROR, 98}, {7, SHIFT, 132}, },
			{{-1, ERROR, 99}, {11, SHIFT, 133}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 51}, {8, SHIFT, 134}, {10, SHIFT, 135}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 106}, {5, SHIFT, 136}, {9, SHIFT, 137}, },
			{{-1, REDUCE, 59}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, ERROR, 108}, {11, SHIFT, 138}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 62}, {23, SHIFT, 72}, {24, SHIFT, 73}, {25, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 61}, {23, SHIFT, 72}, {24, SHIFT, 73}, {25, SHIFT, 74}, {26, SHIFT, 75}, {27, SHIFT, 76}, {28, SHIFT, 77}, },
			{{-1, REDUCE, 64}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 65}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 66}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 68}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 67}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 69}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 71}, {14, SHIFT, 80}, {15, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 72}, {14, SHIFT, 80}, {15, SHIFT, 81}, {16, SHIFT, 82}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 122}, {7, SHIFT, 83}, {12, SHIFT, 56}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 139}, {62, SHIFT, 46}, },
			{{-1, ERROR, 123}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 124}, {7, SHIFT, 83}, {12, SHIFT, 56}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 88}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 126}, {7, SHIFT, 143}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, ERROR, 127}, {12, SHIFT, 56}, },
			{{-1, ERROR, 128}, {7, SHIFT, 145}, {10, SHIFT, 146}, {22, SHIFT, 147}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 131}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 134}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 149}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 135}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 136}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 139}, {8, SHIFT, 123}, },
			{{-1, ERROR, 140}, {9, SHIFT, 154}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 35}, {44, SHIFT, 155}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 146}, {0, SHIFT, 156}, },
			{{-1, ERROR, 147}, {0, SHIFT, 36}, {1, SHIFT, 37}, {2, SHIFT, 38}, {3, SHIFT, 39}, {8, SHIFT, 40}, {18, SHIFT, 41}, {19, SHIFT, 42}, {20, SHIFT, 43}, {45, SHIFT, 44}, {59, SHIFT, 45}, {62, SHIFT, 46}, },
			{{-1, ERROR, 148}, {7, SHIFT, 158}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 150}, {5, SHIFT, 136}, {9, SHIFT, 159}, },
			{{-1, ERROR, 151}, {11, SHIFT, 160}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 60}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, ERROR, 153}, {7, SHIFT, 161}, {12, SHIFT, 56}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 155}, {7, SHIFT, 83}, {12, SHIFT, 56}, {37, SHIFT, 11}, {39, SHIFT, 12}, {43, SHIFT, 85}, {46, SHIFT, 13}, {47, SHIFT, 86}, {48, SHIFT, 14}, {54, SHIFT, 87}, {56, SHIFT, 15}, {60, SHIFT, 88}, {62, SHIFT, 46}, },
			{{-1, ERROR, 156}, {11, SHIFT, 164}, },
			{{-1, ERROR, 157}, {7, SHIFT, 165}, {30, SHIFT, 70}, {31, SHIFT, 71}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 164}, {7, SHIFT, 166}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {3, 7}, },
			{{-1, 5}, },
			{{-1, 17}, },
			{{-1, 18}, {17, 25}, },
			{{-1, 19}, },
			{{-1, 89}, {8, 20}, {17, 20}, {27, 32}, {59, 32}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 33}, },
			{{-1, 34}, {59, 100}, },
			{{-1, 90}, {31, 57}, {60, 101}, {127, 144}, {153, 144}, },
			{{-1, 91}, {85, 122}, },
			{{-1, 92}, {124, 141}, {155, 162}, },
			{{-1, 93}, {155, 163}, },
			{{-1, 94}, {91, 130}, {122, 130}, {124, 142}, },
			{{-1, 124}, {88, 127}, {139, 153}, },
			{{-1, 95}, },
			{{-1, 96}, },
			{{-1, 47}, {56, 97}, {85, 97}, {91, 97}, {122, 97}, {124, 97}, {155, 97}, },
			{{-1, 48}, },
			{{-1, 49}, {56, 98}, {85, 98}, {91, 98}, {122, 98}, {124, 98}, {155, 98}, },
			{{-1, 106}, {134, 150}, },
			{{-1, 107}, {30, 50}, {40, 62}, {68, 108}, {87, 126}, {123, 140}, {131, 148}, {135, 151}, {136, 152}, {147, 157}, },
			{{-1, 51}, {70, 109}, {71, 110}, },
			{{-1, 52}, {72, 111}, {73, 112}, {74, 113}, {75, 114}, {76, 115}, {77, 116}, },
			{{-1, 53}, {78, 117}, {79, 118}, },
			{{-1, 54}, {41, 63}, {42, 64}, {43, 65}, {80, 119}, {81, 120}, {82, 121}, },
			{{-1, 55}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: ';', '}', 'bool', 'char', 'float', 'int', 'string', 'void'",
			"expecting: '('",
			"expecting: ';', '(', '[', '='",
			"expecting: ')', 'bool', 'char', 'float', 'int', 'string'",
			"expecting: integer constant",
			"expecting: integer constant, string literal, character constant, floating constant, '(', '+', '-', '!', 'false', 'true', id",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: ',', ';', ')', ']', '*', '/', '%', '+', '-', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: '.', ',', ';', '(', ')', '[', ']', '*', '/', '%', '+', '-', '=', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ',', ';', ')', ']', '*', '/', '%', '+', '-', '=', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ';', '&&', '||'",
			"expecting: ',', ';', ')', ']', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ',', ';', ')', ']', '+', '-', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'float', 'if', 'int', 'return', 'string', 'while', id",
			"expecting: ',', ')', '['",
			"expecting: 'bool', 'char', 'float', 'int', 'string'",
			"expecting: ';'",
			"expecting: ')', '&&', '||'",
			"expecting: integer constant, string literal, character constant, floating constant, '(', ')', '+', '-', '!', 'false', 'true', id",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'else', 'float', 'if', 'int', 'return', 'string', 'while', id",
			"expecting: ';', '{', '}', 'bool', 'char', 'do', 'else', 'float', 'if', 'int', 'return', 'string', 'while', 'void', id",
			"expecting: ';', '{', 'bool', 'char', 'do', 'float', 'if', 'int', 'return', 'string', 'while', id",
			"expecting: integer constant, string literal, character constant, floating constant, ';', '(', '+', '-', '!', 'false', 'true', id",
			"expecting: '='",
			"expecting: ',', ';', '(', ')', '[', ']', '*', '/', '%', '+', '-', '=', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ',', ')', '&&', '||'",
			"expecting: ']', '&&', '||'",
			"expecting: ';', '[', '='",
			"expecting: ';', '{'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 4, 3, 5, 5, 3, 1, 1, 1, 1, 1, 1, 5, 5, 5, 1, 5, 6, 6, 3, 5, 7, 8, 5, 9, 10, 4, 1, 11, 11, 12, 13, 13, 13, 13, 10, 10, 10, 10, 13, 13, 14, 13, 15, 13, 16, 17, 18, 13, 13, 13, 19, 5, 20, 21, 4, 22, 23, 13, 13, 13, 1, 24, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25, 26, 27, 6, 28, 6, 1, 25, 19, 19, 19, 19, 25, 25, 29, 22, 12, 11, 5, 5, 13, 30, 13, 11, 31, 32, 17, 17, 18, 18, 18, 18, 18, 18, 13, 13, 13, 13, 13, 27, 10, 27, 25, 16, 4, 33, 26, 19, 10, 25, 11, 24, 10, 10, 13, 15, 6, 23, 25, 19, 25, 25, 25, 9, 10, 16, 13, 11, 32, 31, 34, 27, 27, 12, 16, 25, 13, 15, 25, 25, 19, 22, 25, 25, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
