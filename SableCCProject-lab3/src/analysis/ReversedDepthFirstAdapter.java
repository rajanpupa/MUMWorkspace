/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        outAProgram(node);
    }

    public void inAClassdeclsFirstClassDecls(AClassdeclsFirstClassDecls node)
    {
        defaultIn(node);
    }

    public void outAClassdeclsFirstClassDecls(AClassdeclsFirstClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdeclsFirstClassDecls(AClassdeclsFirstClassDecls node)
    {
        inAClassdeclsFirstClassDecls(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        outAClassdeclsFirstClassDecls(node);
    }

    public void inAClassdeclsSecondClassDecls(AClassdeclsSecondClassDecls node)
    {
        defaultIn(node);
    }

    public void outAClassdeclsSecondClassDecls(AClassdeclsSecondClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdeclsSecondClassDecls(AClassdeclsSecondClassDecls node)
    {
        inAClassdeclsSecondClassDecls(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        outAClassdeclsSecondClassDecls(node);
    }

    public void inAClassdeclFirstClassDecl(AClassdeclFirstClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassdeclFirstClassDecl(AClassdeclFirstClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdeclFirstClassDecl(AClassdeclFirstClassDecl node)
    {
        inAClassdeclFirstClassDecl(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getClassHdr() != null)
        {
            node.getClassHdr().apply(this);
        }
        outAClassdeclFirstClassDecl(node);
    }

    public void inAClassdeclSecondClassDecl(AClassdeclSecondClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassdeclSecondClassDecl(AClassdeclSecondClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdeclSecondClassDecl(AClassdeclSecondClassDecl node)
    {
        inAClassdeclSecondClassDecl(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getMemberDecls() != null)
        {
            node.getMemberDecls().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getClassHdr() != null)
        {
            node.getClassHdr().apply(this);
        }
        outAClassdeclSecondClassDecl(node);
    }

    public void inAClasshdrFirstClassHdr(AClasshdrFirstClassHdr node)
    {
        defaultIn(node);
    }

    public void outAClasshdrFirstClassHdr(AClasshdrFirstClassHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasshdrFirstClassHdr(AClasshdrFirstClassHdr node)
    {
        inAClasshdrFirstClassHdr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClazz() != null)
        {
            node.getClazz().apply(this);
        }
        outAClasshdrFirstClassHdr(node);
    }

    public void inAMemberdeclsFirstMemberDecls(AMemberdeclsFirstMemberDecls node)
    {
        defaultIn(node);
    }

    public void outAMemberdeclsFirstMemberDecls(AMemberdeclsFirstMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberdeclsFirstMemberDecls(AMemberdeclsFirstMemberDecls node)
    {
        inAMemberdeclsFirstMemberDecls(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        if(node.getMemberDecls() != null)
        {
            node.getMemberDecls().apply(this);
        }
        outAMemberdeclsFirstMemberDecls(node);
    }

    public void inAMemberdeclsSecondMemberDecls(AMemberdeclsSecondMemberDecls node)
    {
        defaultIn(node);
    }

    public void outAMemberdeclsSecondMemberDecls(AMemberdeclsSecondMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberdeclsSecondMemberDecls(AMemberdeclsSecondMemberDecls node)
    {
        inAMemberdeclsSecondMemberDecls(node);
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        outAMemberdeclsSecondMemberDecls(node);
    }

    public void inAMemberFirstMember(AMemberFirstMember node)
    {
        defaultIn(node);
    }

    public void outAMemberFirstMember(AMemberFirstMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberFirstMember(AMemberFirstMember node)
    {
        inAMemberFirstMember(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAMemberFirstMember(node);
    }

    public void inAMemberSecondMember(AMemberSecondMember node)
    {
        defaultIn(node);
    }

    public void outAMemberSecondMember(AMemberSecondMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberSecondMember(AMemberSecondMember node)
    {
        inAMemberSecondMember(node);
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMemberSecondMember(node);
    }

    public void inAMemberThirdMember(AMemberThirdMember node)
    {
        defaultIn(node);
    }

    public void outAMemberThirdMember(AMemberThirdMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberThirdMember(AMemberThirdMember node)
    {
        inAMemberThirdMember(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAMemberThirdMember(node);
    }

    public void inAFieldFirstField(AFieldFirstField node)
    {
        defaultIn(node);
    }

    public void outAFieldFirstField(AFieldFirstField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldFirstField(AFieldFirstField node)
    {
        inAFieldFirstField(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFieldFirstField(node);
    }

    public void inAFieldSecondField(AFieldSecondField node)
    {
        defaultIn(node);
    }

    public void outAFieldSecondField(AFieldSecondField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldSecondField(AFieldSecondField node)
    {
        inAFieldSecondField(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFieldSecondField(node);
    }

    public void inAFieldThirdField(AFieldThirdField node)
    {
        defaultIn(node);
    }

    public void outAFieldThirdField(AFieldThirdField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldThirdField(AFieldThirdField node)
    {
        inAFieldThirdField(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFieldThirdField(node);
    }

    public void inATypeFirstType(ATypeFirstType node)
    {
        defaultIn(node);
    }

    public void outATypeFirstType(ATypeFirstType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeFirstType(ATypeFirstType node)
    {
        inATypeFirstType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outATypeFirstType(node);
    }

    public void inATypeSecondType(ATypeSecondType node)
    {
        defaultIn(node);
    }

    public void outATypeSecondType(ATypeSecondType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeSecondType(ATypeSecondType node)
    {
        inATypeSecondType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outATypeSecondType(node);
    }

    public void inATypeThirdType(ATypeThirdType node)
    {
        defaultIn(node);
    }

    public void outATypeThirdType(ATypeThirdType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeThirdType(ATypeThirdType node)
    {
        inATypeThirdType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outATypeThirdType(node);
    }

    public void inATypeFourthType(ATypeFourthType node)
    {
        defaultIn(node);
    }

    public void outATypeFourthType(ATypeFourthType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeFourthType(ATypeFourthType node)
    {
        inATypeFourthType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outATypeFourthType(node);
    }

    public void inATypeFifthType(ATypeFifthType node)
    {
        defaultIn(node);
    }

    public void outATypeFifthType(ATypeFifthType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeFifthType(ATypeFifthType node)
    {
        inATypeFifthType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outATypeFifthType(node);
    }

    public void inAMethodFirstMethod(AMethodFirstMethod node)
    {
        defaultIn(node);
    }

    public void outAMethodFirstMethod(AMethodFirstMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodFirstMethod(AMethodFirstMethod node)
    {
        inAMethodFirstMethod(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        outAMethodFirstMethod(node);
    }

    public void inAMethodSecondMethod(AMethodSecondMethod node)
    {
        defaultIn(node);
    }

    public void outAMethodSecondMethod(AMethodSecondMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodSecondMethod(AMethodSecondMethod node)
    {
        inAMethodSecondMethod(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        outAMethodSecondMethod(node);
    }

    public void inAMethodhdrFirstMethodHdr(AMethodhdrFirstMethodHdr node)
    {
        defaultIn(node);
    }

    public void outAMethodhdrFirstMethodHdr(AMethodhdrFirstMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodhdrFirstMethodHdr(AMethodhdrFirstMethodHdr node)
    {
        inAMethodhdrFirstMethodHdr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAMethodhdrFirstMethodHdr(node);
    }

    public void inAMethodhdrSecondMethodHdr(AMethodhdrSecondMethodHdr node)
    {
        defaultIn(node);
    }

    public void outAMethodhdrSecondMethodHdr(AMethodhdrSecondMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodhdrSecondMethodHdr(AMethodhdrSecondMethodHdr node)
    {
        inAMethodhdrSecondMethodHdr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAMethodhdrSecondMethodHdr(node);
    }

    public void inAFormalsFirstFormals(AFormalsFirstFormals node)
    {
        defaultIn(node);
    }

    public void outAFormalsFirstFormals(AFormalsFirstFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalsFirstFormals(AFormalsFirstFormals node)
    {
        inAFormalsFirstFormals(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAFormalsFirstFormals(node);
    }

    public void inAFormalsSecondFormals(AFormalsSecondFormals node)
    {
        defaultIn(node);
    }

    public void outAFormalsSecondFormals(AFormalsSecondFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalsSecondFormals(AFormalsSecondFormals node)
    {
        inAFormalsSecondFormals(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        outAFormalsSecondFormals(node);
    }

    public void inAFormalFirstFormal(AFormalFirstFormal node)
    {
        defaultIn(node);
    }

    public void outAFormalFirstFormal(AFormalFirstFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalFirstFormal(AFormalFirstFormal node)
    {
        inAFormalFirstFormal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFormalFirstFormal(node);
    }

    public void inAFormalSecondFormal(AFormalSecondFormal node)
    {
        defaultIn(node);
    }

    public void outAFormalSecondFormal(AFormalSecondFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalSecondFormal(AFormalSecondFormal node)
    {
        inAFormalSecondFormal(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFormalSecondFormal(node);
    }

    public void inABlockFirstBlock(ABlockFirstBlock node)
    {
        defaultIn(node);
    }

    public void outABlockFirstBlock(ABlockFirstBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockFirstBlock(ABlockFirstBlock node)
    {
        inABlockFirstBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlockFirstBlock(node);
    }

    public void inABlockSecondBlock(ABlockSecondBlock node)
    {
        defaultIn(node);
    }

    public void outABlockSecondBlock(ABlockSecondBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockSecondBlock(ABlockSecondBlock node)
    {
        inABlockSecondBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlockSecondBlock(node);
    }

    public void inAStmtsFirstStmts(AStmtsFirstStmts node)
    {
        defaultIn(node);
    }

    public void outAStmtsFirstStmts(AStmtsFirstStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtsFirstStmts(AStmtsFirstStmts node)
    {
        inAStmtsFirstStmts(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        outAStmtsFirstStmts(node);
    }

    public void inAStmtsSecondStmts(AStmtsSecondStmts node)
    {
        defaultIn(node);
    }

    public void outAStmtsSecondStmts(AStmtsSecondStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtsSecondStmts(AStmtsSecondStmts node)
    {
        inAStmtsSecondStmts(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStmtsSecondStmts(node);
    }

    public void inAMifFirstMif(AMifFirstMif node)
    {
        defaultIn(node);
    }

    public void outAMifFirstMif(AMifFirstMif node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMifFirstMif(AMifFirstMif node)
    {
        inAMifFirstMif(node);
        if(node.getMifTwo() != null)
        {
            node.getMifTwo().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getMifOne() != null)
        {
            node.getMifOne().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAMifFirstMif(node);
    }

    public void inAStmtSecondMif(AStmtSecondMif node)
    {
        defaultIn(node);
    }

    public void outAStmtSecondMif(AStmtSecondMif node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtSecondMif(AStmtSecondMif node)
    {
        inAStmtSecondMif(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outAStmtSecondMif(node);
    }

    public void inAUifFirstUif(AUifFirstUif node)
    {
        defaultIn(node);
    }

    public void outAUifFirstUif(AUifFirstUif node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUifFirstUif(AUifFirstUif node)
    {
        inAUifFirstUif(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAUifFirstUif(node);
    }

    public void inAUifSecondUif(AUifSecondUif node)
    {
        defaultIn(node);
    }

    public void outAUifSecondUif(AUifSecondUif node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUifSecondUif(AUifSecondUif node)
    {
        inAUifSecondUif(node);
        if(node.getUif() != null)
        {
            node.getUif().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getMif() != null)
        {
            node.getMif().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAUifSecondUif(node);
    }

    public void inAStmtFirstStmt(AStmtFirstStmt node)
    {
        defaultIn(node);
    }

    public void outAStmtFirstStmt(AStmtFirstStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtFirstStmt(AStmtFirstStmt node)
    {
        inAStmtFirstStmt(node);
        if(node.getMif() != null)
        {
            node.getMif().apply(this);
        }
        outAStmtFirstStmt(node);
    }

    public void inAStmtSecondStmt(AStmtSecondStmt node)
    {
        defaultIn(node);
    }

    public void outAStmtSecondStmt(AStmtSecondStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtSecondStmt(AStmtSecondStmt node)
    {
        inAStmtSecondStmt(node);
        if(node.getUif() != null)
        {
            node.getUif().apply(this);
        }
        outAStmtSecondStmt(node);
    }

    public void inACondition(ACondition node)
    {
        defaultIn(node);
    }

    public void outACondition(ACondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        inACondition(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACondition(node);
    }

    public void inALocaldeclFirstLocalDecl(ALocaldeclFirstLocalDecl node)
    {
        defaultIn(node);
    }

    public void outALocaldeclFirstLocalDecl(ALocaldeclFirstLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocaldeclFirstLocalDecl(ALocaldeclFirstLocalDecl node)
    {
        inALocaldeclFirstLocalDecl(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outALocaldeclFirstLocalDecl(node);
    }

    public void inALocaldeclSecondLocalDecl(ALocaldeclSecondLocalDecl node)
    {
        defaultIn(node);
    }

    public void outALocaldeclSecondLocalDecl(ALocaldeclSecondLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocaldeclSecondLocalDecl(ALocaldeclSecondLocalDecl node)
    {
        inALocaldeclSecondLocalDecl(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outALocaldeclSecondLocalDecl(node);
    }

    public void inALocaldeclThirdLocalDecl(ALocaldeclThirdLocalDecl node)
    {
        defaultIn(node);
    }

    public void outALocaldeclThirdLocalDecl(ALocaldeclThirdLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocaldeclThirdLocalDecl(ALocaldeclThirdLocalDecl node)
    {
        inALocaldeclThirdLocalDecl(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outALocaldeclThirdLocalDecl(node);
    }

    public void inASimplestmtFirstSimpleStmt(ASimplestmtFirstSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtFirstSimpleStmt(ASimplestmtFirstSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtFirstSimpleStmt(ASimplestmtFirstSimpleStmt node)
    {
        inASimplestmtFirstSimpleStmt(node);
        if(node.getLocalDecl() != null)
        {
            node.getLocalDecl().apply(this);
        }
        outASimplestmtFirstSimpleStmt(node);
    }

    public void inASimplestmtSecondSimpleStmt(ASimplestmtSecondSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtSecondSimpleStmt(ASimplestmtSecondSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtSecondSimpleStmt(ASimplestmtSecondSimpleStmt node)
    {
        inASimplestmtSecondSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outASimplestmtSecondSimpleStmt(node);
    }

    public void inASimplestmtThirdSimpleStmt(ASimplestmtThirdSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtThirdSimpleStmt(ASimplestmtThirdSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtThirdSimpleStmt(ASimplestmtThirdSimpleStmt node)
    {
        inASimplestmtThirdSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outASimplestmtThirdSimpleStmt(node);
    }

    public void inASimplestmtFourthSimpleStmt(ASimplestmtFourthSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtFourthSimpleStmt(ASimplestmtFourthSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtFourthSimpleStmt(ASimplestmtFourthSimpleStmt node)
    {
        inASimplestmtFourthSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outASimplestmtFourthSimpleStmt(node);
    }

    public void inASimplestmtFifthSimpleStmt(ASimplestmtFifthSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtFifthSimpleStmt(ASimplestmtFifthSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtFifthSimpleStmt(ASimplestmtFifthSimpleStmt node)
    {
        inASimplestmtFifthSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outASimplestmtFifthSimpleStmt(node);
    }

    public void inASimplestmtSixthSimpleStmt(ASimplestmtSixthSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtSixthSimpleStmt(ASimplestmtSixthSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtSixthSimpleStmt(ASimplestmtSixthSimpleStmt node)
    {
        inASimplestmtSixthSimpleStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outASimplestmtSixthSimpleStmt(node);
    }

    public void inASimplestmtSeventhSimpleStmt(ASimplestmtSeventhSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtSeventhSimpleStmt(ASimplestmtSeventhSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtSeventhSimpleStmt(ASimplestmtSeventhSimpleStmt node)
    {
        inASimplestmtSeventhSimpleStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outASimplestmtSeventhSimpleStmt(node);
    }

    public void inASimplestmtEightthSimpleStmt(ASimplestmtEightthSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtEightthSimpleStmt(ASimplestmtEightthSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtEightthSimpleStmt(ASimplestmtEightthSimpleStmt node)
    {
        inASimplestmtEightthSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outASimplestmtEightthSimpleStmt(node);
    }

    public void inASimplestmtNinthSimpleStmt(ASimplestmtNinthSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimplestmtNinthSimpleStmt(ASimplestmtNinthSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplestmtNinthSimpleStmt(ASimplestmtNinthSimpleStmt node)
    {
        inASimplestmtNinthSimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASimplestmtNinthSimpleStmt(node);
    }

    public void inAFieldaccessFirstFieldAccess(AFieldaccessFirstFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFieldaccessFirstFieldAccess(AFieldaccessFirstFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldaccessFirstFieldAccess(AFieldaccessFirstFieldAccess node)
    {
        inAFieldaccessFirstFieldAccess(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFieldaccessFirstFieldAccess(node);
    }

    public void inAFieldaccessSecondFieldAccess(AFieldaccessSecondFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFieldaccessSecondFieldAccess(AFieldaccessSecondFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldaccessSecondFieldAccess(AFieldaccessSecondFieldAccess node)
    {
        inAFieldaccessSecondFieldAccess(node);
        if(node.getIdTwo() != null)
        {
            node.getIdTwo().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdOne() != null)
        {
            node.getIdOne().apply(this);
        }
        outAFieldaccessSecondFieldAccess(node);
    }

    public void inAFieldaccessThirdFieldAccess(AFieldaccessThirdFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFieldaccessThirdFieldAccess(AFieldaccessThirdFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldaccessThirdFieldAccess(AFieldaccessThirdFieldAccess node)
    {
        inAFieldaccessThirdFieldAccess(node);
        if(node.getArrayRef() != null)
        {
            node.getArrayRef().apply(this);
        }
        outAFieldaccessThirdFieldAccess(node);
    }

    public void inAArrayrefFirstArrayRef(AArrayrefFirstArrayRef node)
    {
        defaultIn(node);
    }

    public void outAArrayrefFirstArrayRef(AArrayrefFirstArrayRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayrefFirstArrayRef(AArrayrefFirstArrayRef node)
    {
        inAArrayrefFirstArrayRef(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayrefFirstArrayRef(node);
    }

    public void inAArrayrefSecondArrayRef(AArrayrefSecondArrayRef node)
    {
        defaultIn(node);
    }

    public void outAArrayrefSecondArrayRef(AArrayrefSecondArrayRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayrefSecondArrayRef(AArrayrefSecondArrayRef node)
    {
        inAArrayrefSecondArrayRef(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIdTwo() != null)
        {
            node.getIdTwo().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdOne() != null)
        {
            node.getIdOne().apply(this);
        }
        outAArrayrefSecondArrayRef(node);
    }

    public void inAMethodcallFirstMethodCall(AMethodcallFirstMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodcallFirstMethodCall(AMethodcallFirstMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallFirstMethodCall(AMethodcallFirstMethodCall node)
    {
        inAMethodcallFirstMethodCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodcallFirstMethodCall(node);
    }

    public void inAMethodcallSecondMethodCall(AMethodcallSecondMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodcallSecondMethodCall(AMethodcallSecondMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallSecondMethodCall(AMethodcallSecondMethodCall node)
    {
        inAMethodcallSecondMethodCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodcallSecondMethodCall(node);
    }

    public void inAMethodcallThirdMethodCall(AMethodcallThirdMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodcallThirdMethodCall(AMethodcallThirdMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallThirdMethodCall(AMethodcallThirdMethodCall node)
    {
        inAMethodcallThirdMethodCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdTwo() != null)
        {
            node.getIdTwo().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdOne() != null)
        {
            node.getIdOne().apply(this);
        }
        outAMethodcallThirdMethodCall(node);
    }

    public void inAMethodcallFourthMethodCall(AMethodcallFourthMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodcallFourthMethodCall(AMethodcallFourthMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallFourthMethodCall(AMethodcallFourthMethodCall node)
    {
        inAMethodcallFourthMethodCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdTwo() != null)
        {
            node.getIdTwo().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdOne() != null)
        {
            node.getIdOne().apply(this);
        }
        outAMethodcallFourthMethodCall(node);
    }

    public void inAArgsFirstArgs(AArgsFirstArgs node)
    {
        defaultIn(node);
    }

    public void outAArgsFirstArgs(AArgsFirstArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsFirstArgs(AArgsFirstArgs node)
    {
        inAArgsFirstArgs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAArgsFirstArgs(node);
    }

    public void inAArgsSecondArgs(AArgsSecondArgs node)
    {
        defaultIn(node);
    }

    public void outAArgsSecondArgs(AArgsSecondArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsSecondArgs(AArgsSecondArgs node)
    {
        inAArgsSecondArgs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        outAArgsSecondArgs(node);
    }

    public void inAExprOneExpr(AExprOneExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOneExpr(AExprOneExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOneExpr(AExprOneExpr node)
    {
        inAExprOneExpr(node);
        if(node.getExprLogical() != null)
        {
            node.getExprLogical().apply(this);
        }
        if(node.getOrOprtn() != null)
        {
            node.getOrOprtn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprOneExpr(node);
    }

    public void inAExprTwoExpr(AExprTwoExpr node)
    {
        defaultIn(node);
    }

    public void outAExprTwoExpr(AExprTwoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTwoExpr(AExprTwoExpr node)
    {
        inAExprTwoExpr(node);
        if(node.getExprLogical() != null)
        {
            node.getExprLogical().apply(this);
        }
        if(node.getAndOprtn() != null)
        {
            node.getAndOprtn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprTwoExpr(node);
    }

    public void inAExprThreeExpr(AExprThreeExpr node)
    {
        defaultIn(node);
    }

    public void outAExprThreeExpr(AExprThreeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprThreeExpr(AExprThreeExpr node)
    {
        inAExprThreeExpr(node);
        if(node.getExprLogical() != null)
        {
            node.getExprLogical().apply(this);
        }
        outAExprThreeExpr(node);
    }

    public void inAEtwoFiveExprLogical(AEtwoFiveExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoFiveExprLogical(AEtwoFiveExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoFiveExprLogical(AEtwoFiveExprLogical node)
    {
        inAEtwoFiveExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoFiveExprLogical(node);
    }

    public void inAEtwoSixExprLogical(AEtwoSixExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoSixExprLogical(AEtwoSixExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoSixExprLogical(AEtwoSixExprLogical node)
    {
        inAEtwoSixExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoSixExprLogical(node);
    }

    public void inAEtwoOneExprLogical(AEtwoOneExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoOneExprLogical(AEtwoOneExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoOneExprLogical(AEtwoOneExprLogical node)
    {
        inAEtwoOneExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoOneExprLogical(node);
    }

    public void inAEtwoTwoExprLogical(AEtwoTwoExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoTwoExprLogical(AEtwoTwoExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoTwoExprLogical(AEtwoTwoExprLogical node)
    {
        inAEtwoTwoExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoTwoExprLogical(node);
    }

    public void inAEtwoThreeExprLogical(AEtwoThreeExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoThreeExprLogical(AEtwoThreeExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoThreeExprLogical(AEtwoThreeExprLogical node)
    {
        inAEtwoThreeExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoThreeExprLogical(node);
    }

    public void inAEtwoFourExprLogical(AEtwoFourExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoFourExprLogical(AEtwoFourExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoFourExprLogical(AEtwoFourExprLogical node)
    {
        inAEtwoFourExprLogical(node);
        if(node.getEthreeTwo() != null)
        {
            node.getEthreeTwo().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getEthreeOne() != null)
        {
            node.getEthreeOne().apply(this);
        }
        outAEtwoFourExprLogical(node);
    }

    public void inAEtwoSevenExprLogical(AEtwoSevenExprLogical node)
    {
        defaultIn(node);
    }

    public void outAEtwoSevenExprLogical(AEtwoSevenExprLogical node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtwoSevenExprLogical(AEtwoSevenExprLogical node)
    {
        inAEtwoSevenExprLogical(node);
        if(node.getExprAddSub() != null)
        {
            node.getExprAddSub().apply(this);
        }
        outAEtwoSevenExprLogical(node);
    }

    public void inAEthreeOneExprAddSub(AEthreeOneExprAddSub node)
    {
        defaultIn(node);
    }

    public void outAEthreeOneExprAddSub(AEthreeOneExprAddSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEthreeOneExprAddSub(AEthreeOneExprAddSub node)
    {
        inAEthreeOneExprAddSub(node);
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExprAddSub() != null)
        {
            node.getExprAddSub().apply(this);
        }
        outAEthreeOneExprAddSub(node);
    }

    public void inAEthreeTwoExprAddSub(AEthreeTwoExprAddSub node)
    {
        defaultIn(node);
    }

    public void outAEthreeTwoExprAddSub(AEthreeTwoExprAddSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEthreeTwoExprAddSub(AEthreeTwoExprAddSub node)
    {
        inAEthreeTwoExprAddSub(node);
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExprAddSub() != null)
        {
            node.getExprAddSub().apply(this);
        }
        outAEthreeTwoExprAddSub(node);
    }

    public void inAEthreeThreeExprAddSub(AEthreeThreeExprAddSub node)
    {
        defaultIn(node);
    }

    public void outAEthreeThreeExprAddSub(AEthreeThreeExprAddSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEthreeThreeExprAddSub(AEthreeThreeExprAddSub node)
    {
        inAEthreeThreeExprAddSub(node);
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        outAEthreeThreeExprAddSub(node);
    }

    public void inAEfourOneExprMulDiv(AEfourOneExprMulDiv node)
    {
        defaultIn(node);
    }

    public void outAEfourOneExprMulDiv(AEfourOneExprMulDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfourOneExprMulDiv(AEfourOneExprMulDiv node)
    {
        inAEfourOneExprMulDiv(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        outAEfourOneExprMulDiv(node);
    }

    public void inAEfourTwoExprMulDiv(AEfourTwoExprMulDiv node)
    {
        defaultIn(node);
    }

    public void outAEfourTwoExprMulDiv(AEfourTwoExprMulDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfourTwoExprMulDiv(AEfourTwoExprMulDiv node)
    {
        inAEfourTwoExprMulDiv(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        outAEfourTwoExprMulDiv(node);
    }

    public void inAEfourThreeExprMulDiv(AEfourThreeExprMulDiv node)
    {
        defaultIn(node);
    }

    public void outAEfourThreeExprMulDiv(AEfourThreeExprMulDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfourThreeExprMulDiv(AEfourThreeExprMulDiv node)
    {
        inAEfourThreeExprMulDiv(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExprMulDiv() != null)
        {
            node.getExprMulDiv().apply(this);
        }
        outAEfourThreeExprMulDiv(node);
    }

    public void inAEfourFourExprMulDiv(AEfourFourExprMulDiv node)
    {
        defaultIn(node);
    }

    public void outAEfourFourExprMulDiv(AEfourFourExprMulDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfourFourExprMulDiv(AEfourFourExprMulDiv node)
    {
        inAEfourFourExprMulDiv(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        outAEfourFourExprMulDiv(node);
    }

    public void inAEfiveOneExprUnaryOprt(AEfiveOneExprUnaryOprt node)
    {
        defaultIn(node);
    }

    public void outAEfiveOneExprUnaryOprt(AEfiveOneExprUnaryOprt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfiveOneExprUnaryOprt(AEfiveOneExprUnaryOprt node)
    {
        inAEfiveOneExprUnaryOprt(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getExclMark() != null)
        {
            node.getExclMark().apply(this);
        }
        outAEfiveOneExprUnaryOprt(node);
    }

    public void inAEfiveTwoExprUnaryOprt(AEfiveTwoExprUnaryOprt node)
    {
        defaultIn(node);
    }

    public void outAEfiveTwoExprUnaryOprt(AEfiveTwoExprUnaryOprt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfiveTwoExprUnaryOprt(AEfiveTwoExprUnaryOprt node)
    {
        inAEfiveTwoExprUnaryOprt(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAEfiveTwoExprUnaryOprt(node);
    }

    public void inAEfiveThreeExprUnaryOprt(AEfiveThreeExprUnaryOprt node)
    {
        defaultIn(node);
    }

    public void outAEfiveThreeExprUnaryOprt(AEfiveThreeExprUnaryOprt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEfiveThreeExprUnaryOprt(AEfiveThreeExprUnaryOprt node)
    {
        inAEfiveThreeExprUnaryOprt(node);
        if(node.getExprUnaryOprt() != null)
        {
            node.getExprUnaryOprt().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAEfiveThreeExprUnaryOprt(node);
    }

    public void inAEFiveFourExprUnaryOprt(AEFiveFourExprUnaryOprt node)
    {
        defaultIn(node);
    }

    public void outAEFiveFourExprUnaryOprt(AEFiveFourExprUnaryOprt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEFiveFourExprUnaryOprt(AEFiveFourExprUnaryOprt node)
    {
        inAEFiveFourExprUnaryOprt(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAEFiveFourExprUnaryOprt(node);
    }

    public void inAPrimaryOnePrimary(APrimaryOnePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryOnePrimary(APrimaryOnePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryOnePrimary(APrimaryOnePrimary node)
    {
        inAPrimaryOnePrimary(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAPrimaryOnePrimary(node);
    }

    public void inAPrimaryTwoPrimary(APrimaryTwoPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryTwoPrimary(APrimaryTwoPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryTwoPrimary(APrimaryTwoPrimary node)
    {
        inAPrimaryTwoPrimary(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAPrimaryTwoPrimary(node);
    }

    public void inAPrimaryThreePrimary(APrimaryThreePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryThreePrimary(APrimaryThreePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryThreePrimary(APrimaryThreePrimary node)
    {
        inAPrimaryThreePrimary(node);
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        outAPrimaryThreePrimary(node);
    }

    public void inAPrimaryFourPrimary(APrimaryFourPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFourPrimary(APrimaryFourPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFourPrimary(APrimaryFourPrimary node)
    {
        inAPrimaryFourPrimary(node);
        if(node.getCharacterConstant() != null)
        {
            node.getCharacterConstant().apply(this);
        }
        outAPrimaryFourPrimary(node);
    }

    public void inAPrimaryFivePrimary(APrimaryFivePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFivePrimary(APrimaryFivePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFivePrimary(APrimaryFivePrimary node)
    {
        inAPrimaryFivePrimary(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAPrimaryFivePrimary(node);
    }

    public void inAPrimarySixPrimary(APrimarySixPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimarySixPrimary(APrimarySixPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimarySixPrimary(APrimarySixPrimary node)
    {
        inAPrimarySixPrimary(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        outAPrimarySixPrimary(node);
    }

    public void inAPrimarySevenPrimary(APrimarySevenPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimarySevenPrimary(APrimarySevenPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimarySevenPrimary(APrimarySevenPrimary node)
    {
        inAPrimarySevenPrimary(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outAPrimarySevenPrimary(node);
    }

    public void inAPrimaryEightPrimary(APrimaryEightPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryEightPrimary(APrimaryEightPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryEightPrimary(APrimaryEightPrimary node)
    {
        inAPrimaryEightPrimary(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAPrimaryEightPrimary(node);
    }

    public void inAPrimaryNinePrimary(APrimaryNinePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryNinePrimary(APrimaryNinePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryNinePrimary(APrimaryNinePrimary node)
    {
        inAPrimaryNinePrimary(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPrimaryNinePrimary(node);
    }
}
